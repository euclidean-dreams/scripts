# automatically generated by the FlatBuffers compiler, do not modify

# namespace: ImpresarioSerialization

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PitchProcessorParameters(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsPitchProcessorParameters(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PitchProcessorParameters()
        x.Init(buf, n + offset)
        return x

    # PitchProcessorParameters
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PitchProcessorParameters
    def Method(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # PitchProcessorParameters
    def Threshold(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PitchProcessorParameters
    def Silence(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def PitchProcessorParametersStart(builder): builder.StartObject(3)
def PitchProcessorParametersAddMethod(builder, method): builder.PrependInt8Slot(0, method, 0)
def PitchProcessorParametersAddThreshold(builder, threshold): builder.PrependFloat32Slot(1, threshold, 0.0)
def PitchProcessorParametersAddSilence(builder, silence): builder.PrependFloat32Slot(2, silence, 0.0)
def PitchProcessorParametersEnd(builder): return builder.EndObject()
